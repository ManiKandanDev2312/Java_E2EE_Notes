---------------------------------------------------------------------------------------------------
Spring Security
--------------------------------------------------------------------------------------------------
OWASP - Open Web Application Security Project
CSRF - Cross site Request Forgery

Note : Spring Security having multiple filter which is used to filter the Request by some condition before reach to the servlet.


1. Each and every login by using Spring Security its create separate session id for that. ( Method Name getSession )
2. we can access the session id by HttpServletRequest.
3. apart from get request remaining request are need to CSRF token to access the url.
4. we can access the CSRF token by using the method which is present inside the HttpServletRequest name is getAttribute.

Note: 
By Setting Custom password and username by using
spring.security.user.name = username
spring.security.user.password =  password

same site
server.servlet.session.cookie.same-site = strict
---------------------------------------------------------------------------------------------------------------------
Configuration
--------------------------------------------------------------------------------------------------------------
1. we need to configure the filter of Spring Security for our own conditions.

Important Note : Before Spring Security 6 We are using WebSecurityConfigurerAdapter for the SecurityFilterChain

Note: SecurityFilterChain
CSRF Disable - by using HttpSecurity.customizer.
Authorize All Request - by using HttpSecurity.authorizeHttpRequests
httpBasic - which leaves Customizer.withDefaults
sessionManagement - which used to keep session as stateless by using of sessionCreationPolicy
return SecurityFilterChain by using HttpSecurity

Note : UserDetailsService
UserDetails class which is used to define the user by their name, password, role.
return InMemoryUserDetailsManager it is indirectly return the Object of UserDetailsService

Note : AuthenticationProvider
DaoAuthenticationProvider which is used to provide a authentication for the user.
by using this class we got some methods like setUserDetailsService and setPasswordEncoder.
return AuthenticationProvider pobject for this bean

----------------------------------------------------------------------------------------------------
SecurityFilterChain
---------------------------------------------------------------------------------------------------

By the use HttpSecurity we can modify the filters like CSRF,httpBasic,sessionManagement and authroizeHttpRequest.

like CSRF:
Customizer is an interface
CsrfConfigurer is a class
HttpSecurity is a Class
now we can use Customizer<CsrfConfigurer<HttpSecurity>> for disabling the CSRF token.

like httpBasic:
which is used to get username and the password ByDefault browser prompt.

httpBasic(Customizer.withDefaults());

like authorizeHttpRequest

which is authorize the request are requested by the client.
AuthorizationManagerRequestMatcherRegistry is a class

Customizer<AuthorizationManagerRequestMatcherRegistry<HttpSecurity>.AuthorizationManagerRequestMatcherRegistry>

like sessionManagement
which used to create a new session id for every refresh.
Customizer<SessionManagementConfigurer<HttpSecurity>>

-----------------------------------------------------------------------------------------------------------
UserDetailsService
------------------------------------------------------------------------------------------------------------

we need to create a Entity for the User if the UserDetails where retrive from the Database.

or otherwise.

UserDetails User = User.withDefaultPasswordEncoder().username("useraname").password("password").roles("role of the user").build();

finally we need to return UserDeatilsService object but it is an interface right so we can use InMemoryUserDetailsManager(user) to 
return object of UserDetails.

------------------------------------------------------------------------------------------------------------------------
AuthenticationProvider
----------------------------------------------------------------------------------------------------------------------
which is used to authenticate the user is valid or not

by using DaoAuthenticationProvider class we having objects like setUserDetailsService and setPasswordEncoder

------------------------------------------------------------------------------------------------
Annotations
---------------------------------------------------------------------------------------------
@EnableWebSecurity - which is used to enable security features here.
@PreAuthorize - which is used to define method-level security

-------------------------------------------------------------------------------------------------
Architecture
-------------------------------------------------------------------------------------------------
SecurityConfig - which is the class is used to configure the security for our application. like AuthenticationProvider, SecurityFilterChain etc..
UserDetailsService - which is the Service is used to Validate the userDetails retrieve from the Repo Layer.
UserRepository - which is the Repository is used to communicate with database.
User - which is the Model is used to define schema for the User.
UserPrinciple - which is the Service is used to verify the Authorization for the user,token is experied or not and finally the active is or not. 
                                        
                                                          



